{
    "nbformat_minor": 1, 
    "cells": [
        {
            "source": "## Segmentation and Clustering_ Part 3", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "source": "from bs4 import BeautifulSoup\nimport requests\n\nurl=\"https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M\"\nr = requests.get(url)\nsoup = BeautifulSoup(r.text, 'html.parser')  \n\n\n\ndatasoup = soup.find('table')\n#print(datasoup)\n\n", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "execution_count": 1
        }, 
        {
            "source": "type(datasoup)", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "output_type": "execute_result", 
                    "data": {
                        "text/plain": "bs4.element.Tag"
                    }, 
                    "execution_count": 2, 
                    "metadata": {}
                }
            ], 
            "execution_count": 2
        }, 
        {
            "source": "## Data Scraping", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "source": "  \nBorough=[]   \nNeighborhood=[]\nPostalcode=[]\n    \nfor row in datasoup.find_all('tr'):\n     for cell in row.find_all('td'):\n            if (cell.find('i') ):\n                continue\n            postalcode=cell.find('b').text\n            Postalcode.append(postalcode)\n            bor=cell.find('span').text.split(\"\\n\")[0]\n            Borough.append(bor)\n            neigh=cell.find('span').text.split(\"\\n\")[1:]\n            lastneigh = ','.join(map(str, neigh))\n            Neighborhood.append(lastneigh)                                  ", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "execution_count": 3
        }, 
        {
            "source": "## Clear Data", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "source": "clearneighborhood=[]\ncleanerneighborhood=[]\nbeautyneighborhood=[]\n\n#print(neighborhood)\n\nfor j in Neighborhood:\n        b=j.strip('()')\n        cleanerneighborhood.append(b)\n\n#print(cleanerneighborhood)\n\n\n\nfor j in cleanerneighborhood:\n        b=j.replace('/',',')\n        clearneighborhood.append(b)\n        \n        \nclearneighborhood[4]=clearneighborhood[4] +\"Queen's Park\"      \n#print(len(clearneighborhood))\n\n\nfor j in clearneighborhood:\n        b=j.replace('(','').replace(')','')\n        beautyneighborhood.append(b)\n\n\nprint(\"The length of Postalcode is : \" , len(Postalcode))\nprint(\"The length of Borough is : \", len(Borough))\nprint(\"The length of Neighborhood is : \" ,len(beautyneighborhood))\n", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "output_type": "stream", 
                    "name": "stdout", 
                    "text": "The length of Postalcode is :  103\nThe length of Borough is :  103\nThe length of Neighborhood is :  103\n"
                }
            ], 
            "execution_count": 4
        }, 
        {
            "source": "## Create Dataframe", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "source": "import pandas as pd \n\ndata_dict={'Postalcode': Postalcode , 'Borough': Borough ,'Neighborhood': beautyneighborhood }\n\ndf=pd.DataFrame(data_dict)\n\n", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "execution_count": 5
        }, 
        {
            "source": "df = df[['Postalcode','Borough','Neighborhood']]\ndf\n", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "output_type": "execute_result", 
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Postalcode</th>\n      <th>Borough</th>\n      <th>Neighborhood</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>M3A</td>\n      <td>North York(Parkwoods)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>M4A</td>\n      <td>North York(Victoria Village)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>M5A</td>\n      <td>Downtown Toronto(Regent Park / Harbourfront)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>M6A</td>\n      <td>North York(Lawrence Manor / Lawrence Heights)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>M7A</td>\n      <td>Queen's Park</td>\n      <td>Queen's Park</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>M9A</td>\n      <td>Etobicoke(Islington Avenue)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>M1B</td>\n      <td>Scarborough(Malvern / Rouge)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>M3B</td>\n      <td>North York(Don Mills)North</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>M4B</td>\n      <td>East York(Parkview Hill / Woodbine Gardens)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>M5B</td>\n      <td>Downtown Toronto(Garden District, Ryerson)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>M6B</td>\n      <td>North York(Glencairn)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>M9B</td>\n      <td>Etobicoke(West Deane Park / Princess Gardens /...</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>M1C</td>\n      <td>Scarborough(Rouge Hill / Port Union / Highland...</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>M3C</td>\n      <td>North York(Don Mills)South(Flemingdon Park)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>M4C</td>\n      <td>East York(Woodbine Heights)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>M5C</td>\n      <td>Downtown Toronto(St. James Town)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>M6C</td>\n      <td>York(Humewood-Cedarvale)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>M9C</td>\n      <td>Etobicoke(Eringate / Bloordale Gardens / Old B...</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>M1E</td>\n      <td>Scarborough(Guildwood / Morningside / West Hill)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>M4E</td>\n      <td>East Toronto(The Beaches)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>M5E</td>\n      <td>Downtown Toronto(Berczy Park)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>M6E</td>\n      <td>York(Caledonia-Fairbanks)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>M1G</td>\n      <td>Scarborough(Woburn)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>M4G</td>\n      <td>East York(Leaside)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>M5G</td>\n      <td>Downtown Toronto(Central Bay Street)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>M6G</td>\n      <td>Downtown Toronto(Christie)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>M1H</td>\n      <td>Scarborough(Cedarbrae)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>M2H</td>\n      <td>North York(Hillcrest Village)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>M3H</td>\n      <td>North York(Bathurst Manor / Wilson Heights / D...</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>M4H</td>\n      <td>East York(Thorncliffe Park)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>73</th>\n      <td>M4R</td>\n      <td>Central Toronto(North Toronto West)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>74</th>\n      <td>M5R</td>\n      <td>Central Toronto(The Annex / North Midtown / Yo...</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>75</th>\n      <td>M6R</td>\n      <td>West Toronto(Parkdale / Roncesvalles)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>76</th>\n      <td>M7R</td>\n      <td>MississaugaCanada Post Gateway Processing Cent...</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>77</th>\n      <td>M9R</td>\n      <td>Etobicoke(Kingsview Village / St. Phillips / M...</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>78</th>\n      <td>M1S</td>\n      <td>Scarborough(Agincourt)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>79</th>\n      <td>M4S</td>\n      <td>Central Toronto(Davisville)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>80</th>\n      <td>M5S</td>\n      <td>Downtown Toronto(University of Toronto / Harbord)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>81</th>\n      <td>M6S</td>\n      <td>West Toronto(Runnymede / Swansea)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>82</th>\n      <td>M1T</td>\n      <td>Scarborough(Clarks Corners / Tam O'Shanter / S...</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>83</th>\n      <td>M4T</td>\n      <td>Central Toronto(Moore Park / Summerhill East)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>84</th>\n      <td>M5T</td>\n      <td>Downtown Toronto(Kensington Market / Chinatown...</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>85</th>\n      <td>M1V</td>\n      <td>Scarborough(Milliken / Agincourt North / Steel...</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>86</th>\n      <td>M4V</td>\n      <td>Central Toronto(Summerhill West / Rathnelly / ...</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>87</th>\n      <td>M5V</td>\n      <td>Downtown Toronto(CN Tower / King and Spadina /...</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>88</th>\n      <td>M8V</td>\n      <td>Etobicoke(New Toronto / Mimico South / Humber ...</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>89</th>\n      <td>M9V</td>\n      <td>Etobicoke(South Steeles / Silverstone / Humber...</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>90</th>\n      <td>M1W</td>\n      <td>Scarborough(Steeles West / L'Amoreaux West)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>91</th>\n      <td>M4W</td>\n      <td>Downtown Toronto(Rosedale)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>92</th>\n      <td>M5W</td>\n      <td>Downtown TorontoStn A PO Boxes25 The Esplanade...</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>93</th>\n      <td>M8W</td>\n      <td>Etobicoke(Alderwood / Long Branch)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>94</th>\n      <td>M9W</td>\n      <td>EtobicokeNorthwest(Clairville / Humberwood / W...</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>95</th>\n      <td>M1X</td>\n      <td>Scarborough(Upper Rouge)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>96</th>\n      <td>M4X</td>\n      <td>Downtown Toronto(St. James Town / Cabbagetown)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>97</th>\n      <td>M5X</td>\n      <td>Downtown Toronto(First Canadian Place / Underg...</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>98</th>\n      <td>M8X</td>\n      <td>Etobicoke(The Kingsway / Montgomery Road / Old...</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>99</th>\n      <td>M4Y</td>\n      <td>Downtown Toronto(Church and Wellesley)</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>100</th>\n      <td>M7Y</td>\n      <td>East TorontoBusiness reply mail Processing Cen...</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>101</th>\n      <td>M8Y</td>\n      <td>Etobicoke(Old Mill South / King's Mill Park / ...</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>102</th>\n      <td>M8Z</td>\n      <td>Etobicoke(Mimico NW / The Queensway West / Sou...</td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>\n<p>103 rows \u00d7 3 columns</p>\n</div>", 
                        "text/plain": "    Postalcode                                            Borough  \\\n0          M3A                              North York(Parkwoods)   \n1          M4A                       North York(Victoria Village)   \n2          M5A       Downtown Toronto(Regent Park / Harbourfront)   \n3          M6A      North York(Lawrence Manor / Lawrence Heights)   \n4          M7A                                       Queen's Park   \n5          M9A                        Etobicoke(Islington Avenue)   \n6          M1B                       Scarborough(Malvern / Rouge)   \n7          M3B                         North York(Don Mills)North   \n8          M4B        East York(Parkview Hill / Woodbine Gardens)   \n9          M5B         Downtown Toronto(Garden District, Ryerson)   \n10         M6B                              North York(Glencairn)   \n11         M9B  Etobicoke(West Deane Park / Princess Gardens /...   \n12         M1C  Scarborough(Rouge Hill / Port Union / Highland...   \n13         M3C        North York(Don Mills)South(Flemingdon Park)   \n14         M4C                        East York(Woodbine Heights)   \n15         M5C                   Downtown Toronto(St. James Town)   \n16         M6C                           York(Humewood-Cedarvale)   \n17         M9C  Etobicoke(Eringate / Bloordale Gardens / Old B...   \n18         M1E   Scarborough(Guildwood / Morningside / West Hill)   \n19         M4E                          East Toronto(The Beaches)   \n20         M5E                      Downtown Toronto(Berczy Park)   \n21         M6E                          York(Caledonia-Fairbanks)   \n22         M1G                                Scarborough(Woburn)   \n23         M4G                                 East York(Leaside)   \n24         M5G               Downtown Toronto(Central Bay Street)   \n25         M6G                         Downtown Toronto(Christie)   \n26         M1H                             Scarborough(Cedarbrae)   \n27         M2H                      North York(Hillcrest Village)   \n28         M3H  North York(Bathurst Manor / Wilson Heights / D...   \n29         M4H                        East York(Thorncliffe Park)   \n..         ...                                                ...   \n73         M4R                Central Toronto(North Toronto West)   \n74         M5R  Central Toronto(The Annex / North Midtown / Yo...   \n75         M6R              West Toronto(Parkdale / Roncesvalles)   \n76         M7R  MississaugaCanada Post Gateway Processing Cent...   \n77         M9R  Etobicoke(Kingsview Village / St. Phillips / M...   \n78         M1S                            Scarborough(Agincourt)    \n79         M4S                        Central Toronto(Davisville)   \n80         M5S  Downtown Toronto(University of Toronto / Harbord)   \n81         M6S                  West Toronto(Runnymede / Swansea)   \n82         M1T  Scarborough(Clarks Corners / Tam O'Shanter / S...   \n83         M4T      Central Toronto(Moore Park / Summerhill East)   \n84         M5T  Downtown Toronto(Kensington Market / Chinatown...   \n85         M1V  Scarborough(Milliken / Agincourt North / Steel...   \n86         M4V  Central Toronto(Summerhill West / Rathnelly / ...   \n87         M5V  Downtown Toronto(CN Tower / King and Spadina /...   \n88         M8V  Etobicoke(New Toronto / Mimico South / Humber ...   \n89         M9V  Etobicoke(South Steeles / Silverstone / Humber...   \n90         M1W        Scarborough(Steeles West / L'Amoreaux West)   \n91         M4W                         Downtown Toronto(Rosedale)   \n92         M5W  Downtown TorontoStn A PO Boxes25 The Esplanade...   \n93         M8W                 Etobicoke(Alderwood / Long Branch)   \n94         M9W  EtobicokeNorthwest(Clairville / Humberwood / W...   \n95         M1X                           Scarborough(Upper Rouge)   \n96         M4X     Downtown Toronto(St. James Town / Cabbagetown)   \n97         M5X  Downtown Toronto(First Canadian Place / Underg...   \n98         M8X  Etobicoke(The Kingsway / Montgomery Road / Old...   \n99         M4Y             Downtown Toronto(Church and Wellesley)   \n100        M7Y  East TorontoBusiness reply mail Processing Cen...   \n101        M8Y  Etobicoke(Old Mill South / King's Mill Park / ...   \n102        M8Z  Etobicoke(Mimico NW / The Queensway West / Sou...   \n\n     Neighborhood  \n0                  \n1                  \n2                  \n3                  \n4    Queen's Park  \n5                  \n6                  \n7                  \n8                  \n9                  \n10                 \n11                 \n12                 \n13                 \n14                 \n15                 \n16                 \n17                 \n18                 \n19                 \n20                 \n21                 \n22                 \n23                 \n24                 \n25                 \n26                 \n27                 \n28                 \n29                 \n..            ...  \n73                 \n74                 \n75                 \n76                 \n77                 \n78                 \n79                 \n80                 \n81                 \n82                 \n83                 \n84                 \n85                 \n86                 \n87                 \n88                 \n89                 \n90                 \n91                 \n92                 \n93                 \n94                 \n95                 \n96                 \n97                 \n98                 \n99                 \n100                \n101                \n102                \n\n[103 rows x 3 columns]"
                    }, 
                    "execution_count": 6, 
                    "metadata": {}
                }
            ], 
            "execution_count": 6
        }, 
        {
            "source": "print(\"The size of the dataframe df is : \" , df.shape)", 
            "cell_type": "code", 
            "metadata": {
                "scrolled": true
            }, 
            "outputs": [
                {
                    "output_type": "stream", 
                    "name": "stdout", 
                    "text": "The size of the dataframe df is :  (103, 3)\n"
                }
            ], 
            "execution_count": 7
        }, 
        {
            "source": "#***********************************************************", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "execution_count": 8
        }, 
        {
            "source": "## API Calls for Lat and Long\n", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "source": "Latitude=[]\nLongitude=[]  \n# save your API key\nAPI_key='AIzaSyCfOyzyLzO3gYKwmxsmIBuPY8jPDjX-3vs'\n", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "execution_count": 9
        }, 
        {
            "source": "for post in Postalcode:\n    # construct URL to make API call\n    url = 'https://maps.googleapis.com/maps/api/geocode/json?key={}&address={}'.format(API_key,post)\n    response = requests.get(url).json() # get response\n    if(len(response['results']) == 0 ):\n            latitude=\"\"\n            longitude=\"\"\n            Latitude.append(latitude)\n            Longitude.append(longitude)\n            continue\n    geographical_data = response['results'][0]['geometry']['location'] # get geographical coordinates\n    latitude = geographical_data['lat']\n    longitude = geographical_data['lng']\n    Latitude.append(latitude)\n    Longitude.append(longitude)", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "execution_count": 10
        }, 
        {
            "source": "#Add Lat and Long to the dataframe\nLL = pd.DataFrame({'Latitude': Latitude ,'Longitude': Longitude})\ndf=df.join(LL)\n\n\n", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "execution_count": 11
        }, 
        {
            "source": "df_min=df.loc[df['Latitude'] != '']\ndf_min\n", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "output_type": "execute_result", 
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Postalcode</th>\n      <th>Borough</th>\n      <th>Neighborhood</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>M3A</td>\n      <td>North York(Parkwoods)</td>\n      <td></td>\n      <td>32.3636</td>\n      <td>-90.1524</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>M5A</td>\n      <td>Downtown Toronto(Regent Park / Harbourfront)</td>\n      <td></td>\n      <td>43.6543</td>\n      <td>-79.3606</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>M4B</td>\n      <td>East York(Parkview Hill / Woodbine Gardens)</td>\n      <td></td>\n      <td>43.7149</td>\n      <td>-79.3051</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>M3C</td>\n      <td>North York(Don Mills)South(Flemingdon Park)</td>\n      <td></td>\n      <td>45.5725</td>\n      <td>-73.414</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>M4C</td>\n      <td>East York(Woodbine Heights)</td>\n      <td></td>\n      <td>43.6846</td>\n      <td>-79.3188</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>M1E</td>\n      <td>Scarborough(Guildwood / Morningside / West Hill)</td>\n      <td></td>\n      <td>43.7636</td>\n      <td>-79.1887</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>M5E</td>\n      <td>Downtown Toronto(Berczy Park)</td>\n      <td></td>\n      <td>43.6448</td>\n      <td>-79.3733</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>M2H</td>\n      <td>North York(Hillcrest Village)</td>\n      <td></td>\n      <td>43.8037</td>\n      <td>-79.3719</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>M3H</td>\n      <td>North York(Bathurst Manor / Wilson Heights / D...</td>\n      <td></td>\n      <td>40.782</td>\n      <td>-74.1386</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>M5H</td>\n      <td>Downtown Toronto(Richmond / Adelaide / King)</td>\n      <td></td>\n      <td>43.6511</td>\n      <td>-79.3843</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>M6H</td>\n      <td>West Toronto(Dufferin / Dovercourt Village)</td>\n      <td></td>\n      <td>43.669</td>\n      <td>-79.4423</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>M4J</td>\n      <td>East YorkEast Toronto(The Danforth  East)</td>\n      <td></td>\n      <td>43.6825</td>\n      <td>-79.3281</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>M5J</td>\n      <td>Downtown Toronto(Harbourfront East / Union Sta...</td>\n      <td></td>\n      <td>43.6408</td>\n      <td>-79.3818</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>M2K</td>\n      <td>North York(Bayview Village)</td>\n      <td></td>\n      <td>41.6307</td>\n      <td>-93.7143</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>M3K</td>\n      <td>North York(Downsview)East  (CFB Toronto)</td>\n      <td></td>\n      <td>30.1212</td>\n      <td>-95.4403</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>M6K</td>\n      <td>West Toronto(Brockton / Parkdale Village / Exh...</td>\n      <td></td>\n      <td>43.6368</td>\n      <td>-79.4282</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>M2L</td>\n      <td>North York(York Mills / Silver Hills)</td>\n      <td></td>\n      <td>40.7459</td>\n      <td>-73.9839</td>\n    </tr>\n    <tr>\n      <th>46</th>\n      <td>M3L</td>\n      <td>North York(Downsview)West</td>\n      <td></td>\n      <td>39.0941</td>\n      <td>-76.9338</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>M4L</td>\n      <td>East Toronto(India Bazaar / The Beaches West)</td>\n      <td></td>\n      <td>40.2665</td>\n      <td>-76.7463</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>M9L</td>\n      <td>North York(Humber Summit)</td>\n      <td></td>\n      <td>43.7563</td>\n      <td>-79.566</td>\n    </tr>\n    <tr>\n      <th>51</th>\n      <td>M1M</td>\n      <td>Scarborough(Cliffside / Cliffcrest / Scarborou...</td>\n      <td></td>\n      <td>36.3252</td>\n      <td>-79.6888</td>\n    </tr>\n    <tr>\n      <th>52</th>\n      <td>M2M</td>\n      <td>North York(Willowdale / Newtonbrook)</td>\n      <td></td>\n      <td>40.7303</td>\n      <td>-73.9945</td>\n    </tr>\n    <tr>\n      <th>53</th>\n      <td>M3M</td>\n      <td>North York(Downsview)Central</td>\n      <td></td>\n      <td>43.7238</td>\n      <td>-79.4894</td>\n    </tr>\n    <tr>\n      <th>54</th>\n      <td>M4M</td>\n      <td>East Toronto(Studio District)</td>\n      <td></td>\n      <td>40.7379</td>\n      <td>-74.0002</td>\n    </tr>\n    <tr>\n      <th>57</th>\n      <td>M9M</td>\n      <td>North York(Humberlea / Emery)</td>\n      <td></td>\n      <td>43.7248</td>\n      <td>-79.5322</td>\n    </tr>\n    <tr>\n      <th>58</th>\n      <td>M1N</td>\n      <td>Scarborough(Birch Cliff / Cliffside West)</td>\n      <td></td>\n      <td>43.6927</td>\n      <td>-79.2648</td>\n    </tr>\n    <tr>\n      <th>59</th>\n      <td>M2N</td>\n      <td>North York(Willowdale)South</td>\n      <td></td>\n      <td>40.7472</td>\n      <td>-73.8841</td>\n    </tr>\n    <tr>\n      <th>61</th>\n      <td>M4N</td>\n      <td>Central Toronto(Lawrence Park)</td>\n      <td></td>\n      <td>43.728</td>\n      <td>-79.3888</td>\n    </tr>\n    <tr>\n      <th>63</th>\n      <td>M6N</td>\n      <td>York(Runnymede / The Junction North)</td>\n      <td></td>\n      <td>43.6732</td>\n      <td>-79.4873</td>\n    </tr>\n    <tr>\n      <th>66</th>\n      <td>M2P</td>\n      <td>North York(York Mills West)</td>\n      <td></td>\n      <td>45.4852</td>\n      <td>-122.787</td>\n    </tr>\n    <tr>\n      <th>72</th>\n      <td>M2R</td>\n      <td>North York(Willowdale)West</td>\n      <td></td>\n      <td>44.0693</td>\n      <td>-79.4817</td>\n    </tr>\n    <tr>\n      <th>74</th>\n      <td>M5R</td>\n      <td>Central Toronto(The Annex / North Midtown / Yo...</td>\n      <td></td>\n      <td>43.6727</td>\n      <td>-79.4057</td>\n    </tr>\n    <tr>\n      <th>78</th>\n      <td>M1S</td>\n      <td>Scarborough(Agincourt)</td>\n      <td></td>\n      <td>43.7854</td>\n      <td>-79.2806</td>\n    </tr>\n    <tr>\n      <th>79</th>\n      <td>M4S</td>\n      <td>Central Toronto(Davisville)</td>\n      <td></td>\n      <td>43.4666</td>\n      <td>-81.1963</td>\n    </tr>\n    <tr>\n      <th>84</th>\n      <td>M5T</td>\n      <td>Downtown Toronto(Kensington Market / Chinatown...</td>\n      <td></td>\n      <td>45.4066</td>\n      <td>-71.9696</td>\n    </tr>\n    <tr>\n      <th>87</th>\n      <td>M5V</td>\n      <td>Downtown Toronto(CN Tower / King and Spadina /...</td>\n      <td></td>\n      <td>43.6457</td>\n      <td>-79.3927</td>\n    </tr>\n    <tr>\n      <th>88</th>\n      <td>M8V</td>\n      <td>Etobicoke(New Toronto / Mimico South / Humber ...</td>\n      <td></td>\n      <td>43.6056</td>\n      <td>-79.5013</td>\n    </tr>\n    <tr>\n      <th>89</th>\n      <td>M9V</td>\n      <td>Etobicoke(South Steeles / Silverstone / Humber...</td>\n      <td></td>\n      <td>43.7394</td>\n      <td>-79.5884</td>\n    </tr>\n    <tr>\n      <th>91</th>\n      <td>M4W</td>\n      <td>Downtown Toronto(Rosedale)</td>\n      <td></td>\n      <td>43.6796</td>\n      <td>-79.3775</td>\n    </tr>\n    <tr>\n      <th>93</th>\n      <td>M8W</td>\n      <td>Etobicoke(Alderwood / Long Branch)</td>\n      <td></td>\n      <td>43.6024</td>\n      <td>-79.5435</td>\n    </tr>\n    <tr>\n      <th>94</th>\n      <td>M9W</td>\n      <td>EtobicokeNorthwest(Clairville / Humberwood / W...</td>\n      <td></td>\n      <td>43.7067</td>\n      <td>-79.5941</td>\n    </tr>\n    <tr>\n      <th>99</th>\n      <td>M4Y</td>\n      <td>Downtown Toronto(Church and Wellesley)</td>\n      <td></td>\n      <td>43.6659</td>\n      <td>-79.3832</td>\n    </tr>\n    <tr>\n      <th>102</th>\n      <td>M8Z</td>\n      <td>Etobicoke(Mimico NW / The Queensway West / Sou...</td>\n      <td></td>\n      <td>43.6288</td>\n      <td>-79.521</td>\n    </tr>\n  </tbody>\n</table>\n</div>", 
                        "text/plain": "    Postalcode                                            Borough  \\\n0          M3A                              North York(Parkwoods)   \n2          M5A       Downtown Toronto(Regent Park / Harbourfront)   \n8          M4B        East York(Parkview Hill / Woodbine Gardens)   \n13         M3C        North York(Don Mills)South(Flemingdon Park)   \n14         M4C                        East York(Woodbine Heights)   \n18         M1E   Scarborough(Guildwood / Morningside / West Hill)   \n20         M5E                      Downtown Toronto(Berczy Park)   \n27         M2H                      North York(Hillcrest Village)   \n28         M3H  North York(Bathurst Manor / Wilson Heights / D...   \n30         M5H       Downtown Toronto(Richmond / Adelaide / King)   \n31         M6H        West Toronto(Dufferin / Dovercourt Village)   \n35         M4J          East YorkEast Toronto(The Danforth  East)   \n36         M5J  Downtown Toronto(Harbourfront East / Union Sta...   \n39         M2K                        North York(Bayview Village)   \n40         M3K           North York(Downsview)East  (CFB Toronto)   \n43         M6K  West Toronto(Brockton / Parkdale Village / Exh...   \n45         M2L              North York(York Mills / Silver Hills)   \n46         M3L                          North York(Downsview)West   \n47         M4L      East Toronto(India Bazaar / The Beaches West)   \n50         M9L                          North York(Humber Summit)   \n51         M1M  Scarborough(Cliffside / Cliffcrest / Scarborou...   \n52         M2M               North York(Willowdale / Newtonbrook)   \n53         M3M                       North York(Downsview)Central   \n54         M4M                      East Toronto(Studio District)   \n57         M9M                      North York(Humberlea / Emery)   \n58         M1N          Scarborough(Birch Cliff / Cliffside West)   \n59         M2N                        North York(Willowdale)South   \n61         M4N                     Central Toronto(Lawrence Park)   \n63         M6N               York(Runnymede / The Junction North)   \n66         M2P                        North York(York Mills West)   \n72         M2R                         North York(Willowdale)West   \n74         M5R  Central Toronto(The Annex / North Midtown / Yo...   \n78         M1S                            Scarborough(Agincourt)    \n79         M4S                        Central Toronto(Davisville)   \n84         M5T  Downtown Toronto(Kensington Market / Chinatown...   \n87         M5V  Downtown Toronto(CN Tower / King and Spadina /...   \n88         M8V  Etobicoke(New Toronto / Mimico South / Humber ...   \n89         M9V  Etobicoke(South Steeles / Silverstone / Humber...   \n91         M4W                         Downtown Toronto(Rosedale)   \n93         M8W                 Etobicoke(Alderwood / Long Branch)   \n94         M9W  EtobicokeNorthwest(Clairville / Humberwood / W...   \n99         M4Y             Downtown Toronto(Church and Wellesley)   \n102        M8Z  Etobicoke(Mimico NW / The Queensway West / Sou...   \n\n    Neighborhood Latitude Longitude  \n0                 32.3636  -90.1524  \n2                 43.6543  -79.3606  \n8                 43.7149  -79.3051  \n13                45.5725   -73.414  \n14                43.6846  -79.3188  \n18                43.7636  -79.1887  \n20                43.6448  -79.3733  \n27                43.8037  -79.3719  \n28                 40.782  -74.1386  \n30                43.6511  -79.3843  \n31                 43.669  -79.4423  \n35                43.6825  -79.3281  \n36                43.6408  -79.3818  \n39                41.6307  -93.7143  \n40                30.1212  -95.4403  \n43                43.6368  -79.4282  \n45                40.7459  -73.9839  \n46                39.0941  -76.9338  \n47                40.2665  -76.7463  \n50                43.7563   -79.566  \n51                36.3252  -79.6888  \n52                40.7303  -73.9945  \n53                43.7238  -79.4894  \n54                40.7379  -74.0002  \n57                43.7248  -79.5322  \n58                43.6927  -79.2648  \n59                40.7472  -73.8841  \n61                 43.728  -79.3888  \n63                43.6732  -79.4873  \n66                45.4852  -122.787  \n72                44.0693  -79.4817  \n74                43.6727  -79.4057  \n78                43.7854  -79.2806  \n79                43.4666  -81.1963  \n84                45.4066  -71.9696  \n87                43.6457  -79.3927  \n88                43.6056  -79.5013  \n89                43.7394  -79.5884  \n91                43.6796  -79.3775  \n93                43.6024  -79.5435  \n94                43.7067  -79.5941  \n99                43.6659  -79.3832  \n102               43.6288   -79.521  "
                    }, 
                    "execution_count": 12, 
                    "metadata": {}
                }
            ], 
            "execution_count": 12
        }, 
        {
            "source": "\nimport numpy as np # library to handle data in a vectorized manner\n\nimport pandas as pd # library for data analsysis\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\nimport json # library to handle JSON files\n\n!conda install -c conda-forge geopy --yes\nfrom geopy.geocoders import Nominatim # convert an address into latitude and longitude values\n\nimport requests # library to handle requests\nfrom pandas.io.json import json_normalize # tranform JSON file into a pandas dataframe\n\n# Matplotlib and associated plotting modules\nimport matplotlib.cm as cm\nimport matplotlib.colors as colors\n\n# import k-means from clustering stage\nfrom sklearn.cluster import KMeans\n\n!conda install -c conda-forge folium=0.5.0 --yes \nimport folium # map rendering library\n\nprint('Libraries imported.')\n\n", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "output_type": "stream", 
                    "name": "stdout", 
                    "text": "Fetching package metadata .............\nSolving package specifications: .\n\nPackage plan for installation in environment /opt/conda/envs/DSX-Python35:\n\nThe following NEW packages will be INSTALLED:\n\n    geographiclib: 1.49-py_0   conda-forge\n    geopy:         1.15.0-py_0 conda-forge\n\ngeographiclib- 100% |################################| Time: 0:00:00  39.02 kB/s\ngeopy-1.15.0-p 100% |################################| Time: 0:00:00 695.32 kB/s\nFetching package metadata .............\nSolving package specifications: .\n\nPackage plan for installation in environment /opt/conda/envs/DSX-Python35:\n\nThe following NEW packages will be INSTALLED:\n\n    altair:  2.1.0-py_0 conda-forge\n    branca:  0.3.0-py_0 conda-forge\n    folium:  0.5.0-py_0 conda-forge\n    vincent: 0.4.4-py_1 conda-forge\n\nbranca-0.3.0-p 100% |################################| Time: 0:00:00 799.19 kB/s\nvincent-0.4.4- 100% |################################| Time: 0:00:00 910.15 kB/s\naltair-2.1.0-p 100% |################################| Time: 0:00:00   1.02 MB/s\nfolium-0.5.0-p 100% |################################| Time: 0:00:00   1.49 MB/s\nLibraries imported.\n"
                }
            ], 
            "execution_count": 13
        }, 
        {
            "source": "\n\nlatitude = 43.653908\nlongitude = -79.384293\nprint('The geograpical coordinate of Toronoto Canada are {}, {}.'.format(latitude, longitude))\n", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "output_type": "stream", 
                    "name": "stdout", 
                    "text": "The geograpical coordinate of Toronoto Canada are 43.653908, -79.384293.\n"
                }
            ], 
            "execution_count": 14
        }, 
        {
            "source": "#map of Toronto\nmap_toronto = folium.Map(location=[latitude, longitude], zoom_start=10)\n\n\n# Visualizing and adding markers to map\nfor lat, lng, borough, neighborhood in zip(df_min['Latitude'], df_min['Longitude'], df_min['Borough'], df_min['Neighborhood']):\n    label = '{}, {}'.format(neighborhood, borough)\n    label = folium.Popup(label, parse_html=True)\n    folium.CircleMarker(\n        [lat, lng],\n        radius=5,\n        popup=label,\n        color='red',\n        fill=True,\n        fill_color='#3186cc',\n        fill_opacity=0.7,\n        parse_html=False).add_to(map_toronto)  \n    \n\nmap_toronto\n", 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "output_type": "execute_result", 
                    "data": {
                        "text/html": "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><iframe src=\"data:text/html;charset=utf-8;base64,\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>", 
                        "text/plain": "<folium.folium.Map at 0x7f8ed8233390>"
                    }, 
                    "execution_count": 15, 
                    "metadata": {}
                }
            ], 
            "execution_count": 15
        }
    ], 
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3.5", 
            "name": "python3", 
            "language": "python"
        }, 
        "language_info": {
            "mimetype": "text/x-python", 
            "nbconvert_exporter": "python", 
            "version": "3.5.5", 
            "name": "python", 
            "pygments_lexer": "ipython3", 
            "file_extension": ".py", 
            "codemirror_mode": {
                "version": 3, 
                "name": "ipython"
            }
        }
    }, 
    "nbformat": 4
}